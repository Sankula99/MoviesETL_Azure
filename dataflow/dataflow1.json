{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Movies",
						"type": "DatasetReference"
					},
					"name": "Movie"
				},
				{
					"dataset": {
						"referenceName": "Tags",
						"type": "DatasetReference"
					},
					"name": "Tag"
				},
				{
					"dataset": {
						"referenceName": "filteredmovies",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "moviesrework",
						"type": "DatasetReference"
					},
					"name": "moviesRework",
					"rejectedDataLinkedService": {
						"referenceName": "Movies1ETL",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Movie",
				"source(output(",
				"          userId as string,",
				"          movieId as string,",
				"          tag as string,",
				"          timestamp as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Tag",
				"source(output(",
				"          movie_key as string,",
				"          title as string,",
				"          year as string,",
				"          DateID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"Tag select(mapColumn(",
				"          movieId,",
				"          tag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"Movie select(mapColumn(",
				"          movie_key = movieId,",
				"          title,",
				"          year = title",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(year = replace(split(year, '(')[2], ')', ''),",
				"          title = replace(split(year, '(')[1], ')', '')) ~> derivedColumn1",
				"derivedColumn1 keyGenerate(output(date_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"select4 select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"source1 select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> moviesRework"
			]
		}
	}
}